# -*- coding: utf-8 -*-
"""Main_thr.py

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ZNkHWyH-61GgFIJg9BKr4Xs49vN45KWk
"""

import os
import sys
from PIL import Image
import numpy as np
import imageio
import matplotlib.pyplot as plt
import cv2
import skimage.color
import skimage.io

"""File feliratok beállítása"""

s = 2
# 1: bal, 2: jobb

num = 2
#annotáció párok száma

l_r = "error"

if s == 1:
  l_r = "kontroll_bal"
if s == 2:
  l_r = "kezelt_jobb"

"""Csatorna kiválasztása"""

k = 3
# Cy5 1, DAPI 2, FITC 3


intensity = 0
backgroundTH = 0
brainTH = 0
short = ''



if k == 1:
  short = "Cy5"
  intensity = 33 # tárgylemezenként változik
if k == 2:
  short = "DAPI"
  intensity = 98
if k == 3:
  short = "FITC"
  intensity = 70

file_name = 'FF_X_365_7-12_'

filename = file_name + short +'-Q_Extended.tif'
print(filename)

"""Fileba írás"""

f = open(file_name + "data.txt","a+")
f.write("____________________ " + str(num) + " ___________ " + l_r + " _____ " + "\n")
f.close()

"""Képkonvertálás: tif -> jpg"""

#konvertáló függvény

def convert(filename):
  if len(sys.argv) > 1:
      file = filename
      if os.path.exists(file):
          filename = file.split(".")
          img = Image.open(file)
          target_name = filename[0] + ".jpg"
          rgb_image = img.convert('RGB')
          rgb_image.save(target_name)
          print("Saved as " + target_name)
          return target_name
      else:
          print("No file error!")

target_name = convert(filename)

pic = imageio.imread(target_name)

#megjelenítés
plt.figure(figsize=(7,7))
plt.axis('off')
plt.imshow(pic);

"""**Hisztogram**"""

meann = int(pic.mean().round())

#histogram, bin_edges = np.histogram(pic.ravel(), bins=256, range=(mean, 256))

y, x, _ = plt.hist(pic.ravel(), 256, (meann, 256)) # mean rgb érték felett nézzük
plt.axvline(pic.mean(), color='k', linestyle='dashed', linewidth=1)
#plt.axvline(x.mean(), color='k', linestyle='dashed', linewidth=1)

plt.title(str(num) + '_' + l_r + '_' + file_name + short)
plt.xlabel('RGB érték')
plt.ylabel('mennyiség (pixel)')

plt.show()

max_value = y.max() 
max_pos = x[np.where(y == max_value)]

brainTH = max_pos.round() * 0.5

print(int(max_value.round()))
print(int(max_pos.round()))
print(meann)
print(intensity)

"""Háttér és agy arányának kiszámolása"""

ret,thBG = cv2.threshold(pic,backgroundTH,255,cv2.THRESH_BINARY_INV) #background
ret,thB = cv2.threshold(pic,brainTH,255,cv2.THRESH_BINARY_INV) #brain

fig, axes = plt.subplots(1, 3, figsize=(80,80))

axes[0].imshow(pic, cmap='Greys')
axes[1].imshow(thBG, cmap='Greys')
axes[2].imshow(thB, cmap='Greys')


axes[0].axis('off')
axes[1].axis('off')
axes[2].axis('off')

"""Agy- háttér arányának kiszámolása"""

naBG = np.array(thBG) # np arrayba konvertálás
naB = np.array(thB) # np arrayba konvertálás

annot_background = 0 # fekete pixelek száma (négyzet)
brain = 0 # fekete pixelek száma (agy)


for x in naBG:
  for y in x:
    if(y[0] == 0): # ha fehér
      annot_background += 1

for x in naB:
  for y in x:
    if(y[0] == 0): # ha fehér
      brain += 1

brain_annot_rate = brain/annot_background

print('A háttér pixeleinek száma: ' , annot_background)
print('Az agy pixeleinek száma: ' , brain)


print('Az agy aránya a háttérhez: ' , brain_annot_rate*100 , '%')

#mindenre

fig = plt.figure(figsize=(7,7))
ret,thresh = cv2.threshold(pic,intensity,255,cv2.THRESH_BINARY_INV)

thresh_gray = plt.imshow(thresh, cmap='Greys')
plt.axis('off');

fig.savefig('grey'+ '_' + str(num) + '_' + l_r + '_' + target_name) # kép lementése

grey = imageio.imread('grey'+ '_' + str(num) + '_' + l_r + '_' + target_name)

na = np.array(grey) # np arrayba konvertálás

sum_black = 0 # fekete pixelek száma
sum_white = 0 # fehér pixelek száma

for x in na:
  for y in x:
    if(y[0] == 255): # ha fehér
      sum_white += 1
    else:
      sum_black += 1

print('A fekete pixelek száma: ' , sum_black)
print('A fehér pixelek száma: ' , sum_white)

print('A fekete pixelek aránya: ' , 100/(sum_black + sum_white)*sum_black , '%') # fekete aránya a fehérhez

print('Az agy mérete és fekete pixelek aránya: ' , sum_black/brain_annot_rate) # fekete aránya a fehérhez

f = open(file_name + "data.txt","a+")
f.write(target_name + " küszöb értéke: " + str(intensity) + " : arány nélkül: " + str(sum_black) + 
" : aránnyal: "+ str(round(sum_black/brain_annot_rate)) + "\n")
f.close()